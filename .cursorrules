# Braintrust Nexus - Cursor AI Rules

## Project Context
You are working on the Braintrust Nexus platform - an admin application with two main views (Admin and Client) for managing automated workflows and custom agents. This is a desktop-only web application with strict TypeScript requirements.

## Tech Stack & Architecture
- **Frontend**: React 18 with TypeScript (strict mode - NO `any` types allowed)
- **Build Tool**: Vite
- **Routing**: React Router v6
- **UI Framework**: shadcn/ui components with Tailwind CSS
- **API Layer**: Mock API services with hooks (clientApi, userApi, subscriptionApi, workflowApi)
- **Testing**: Vitest with React Testing Library
- **Authentication**: Google OAuth2 (Admin) and internal auth with 2FA (Client)

## Core Development Rules

### TypeScript Standards
- NEVER use `any` type - always provide proper typing
- Use strict TypeScript configuration
- Define interfaces for all data structures
- Use proper generics where applicable
- Prefer `type` over `interface` for simple object types

### React Best Practices
- Use functional components with hooks
- Implement proper error boundaries
- Use React.memo() for performance optimization where needed
- Follow React 18 patterns (no legacy lifecycle methods)
- Use proper dependency arrays in useEffect
- Avoid unnecessary re-renders

### Code Organization
- Follow the established project structure:
  ```
  /src
  ├── components/
  │   ├── admin/        # Admin-specific components
  │   ├── client/       # Client-specific components
  │   ├── shared/       # Shared components
  │   └── ui/          # shadcn/ui components
  ├── hooks/           # Custom React hooks (useClients, useUsers, useSubscriptions, useWorkflows)
  ├── services/        # API service layer (clientApi, userApi, subscriptionApi, workflowApi)
  ├── data/            # Mock data definitions
  ├── types/           # TypeScript type definitions
  ├── test/            # Test utilities and setup
  └── lib/             # Utilities and configurations
  ```
- Create separate test files (.test.tsx/.test.ts) for each component/service
- Use index.ts files for clean imports
- Keep components focused and single-responsibility

### UI/UX Guidelines
- Use shadcn/ui components as the foundation
- Follow the Figma designs: https://www.figma.com/design/opulwnBe4xYyh4nz9o2Gc5/Nexus
- Implement responsive design for desktop only (no mobile support needed)
- Create professional loading, error, and empty states
- Use consistent spacing and typography
- Implement proper accessibility (ARIA labels, keyboard navigation)

### Component Development
- Always read existing components first to understand patterns
- Use existing UI components from the shadcn/ui library
- Follow established naming conventions
- Implement proper prop typing with interfaces
- Use consistent styling patterns with Tailwind CSS
- Create reusable components when patterns emerge

### API Service Layer
- Use the established service pattern (clientApi, userApi, subscriptionApi, workflowApi) for all data operations
- Never import mockData directly in components - always go through service layer
- Implement proper pagination, filtering, and sorting in services
- Use custom hooks (useClients, useUsers, useSubscriptions, useWorkflows) to integrate services with components
- All data comes from centralized mockData.ts and is accessed through services
- Follow this pattern for new services:
  ```typescript
  // Service class with static methods
  export class ServiceApiService {
    static async getAll(params?) { /* implementation */ }
    static async getById(id) { /* implementation */ }
    static async create(data) { /* implementation */ }
    static async update(id, data) { /* implementation */ }
    static async delete(id) { /* implementation */ }
  }
  
  // Convenience export
  export const serviceApi = {
    getAll: ServiceApiService.getAll,
    getById: ServiceApiService.getById,
    // ... etc
  }
  ```

### Testing Requirements
- Write comprehensive unit tests for all components AND services
- Use React Testing Library best practices for component tests
- Test all API service methods with proper mocking
- Mock service hooks in component tests for isolation
- Test user interactions, edge cases, loading and error states
- Follow naming: `*.test.ts` for services, `*.test.tsx` for components
- Maintain high test coverage
- Run tests before committing changes

## Access Control & Roles
- **Admin Role**: Full access to all clients and manage users
- **Solutions Engineer (SE)**: Access to assigned clients only  
- **Client Role**: Access to own data and workflows only

## Key Features Context

### Admin App Features
- **Dashboard**: Data filters (7 days, 30 days, MTD, QTD, YTD, ITD) with metrics cards
- **Client Management**: Add new clients with comprehensive validation (email, phone, URL)
- **User Management**: Complete CRUD operations with role-based access control
- **Subscription Management**: Create/manage subscription plans with pricing models
- **Workflow Management**: Exception handling and ROI tracking
- **Billing & Credentials**: Management interfaces

### Client App Features
- **Workflows**: Complete workflow ROI management with create/edit functionality
  - Click workflow names to edit existing workflows
  - Toggle workflow status (active/inactive/testing/development)
  - Track time saved, cost saved, nodes, executions, exceptions
  - Sort by date, department, name, and metrics
- **Exception Management**: Reporting and resolution
- **Custom Agent Configuration**: Agent setup and monitoring
- **Billing & Credentials**: Client-specific views

## Development Workflow
1. **Before coding**: Read existing code to understand patterns
2. **Component creation**: Use existing components as templates
3. **Styling**: Follow shadcn/ui + Tailwind patterns
4. **Testing**: Write tests that match existing test patterns
5. **Type safety**: Ensure strict TypeScript compliance
6. **Quality checks**: Run lint, typecheck, and tests

## File Naming Conventions
- Components: PascalCase (e.g., `UserManagement.tsx`)
- Tests: Component name + `.test.tsx` (e.g., `UserManagement.test.tsx`)
- Hooks: camelCase starting with 'use' (e.g., `useAuth.ts`)
- Utils: camelCase (e.g., `apiHelpers.ts`)
- Types: PascalCase for interfaces/types (e.g., `User.ts`)

## Import Organization
```typescript
// 1. React and external libraries
import React from 'react'
import { useState, useEffect } from 'react'

// 2. Custom hooks and services
import { useUsers, useClients, useSubscriptions, useWorkflows } from '@/hooks'
import { userApi, clientApi, subscriptionApi, workflowApi } from '@/services'

// 3. UI components
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'

// 4. Internal components
import { UserList } from './UserList'

// 5. Types and interfaces
import type { User } from '@/types'

// 6. Utils and constants
import { formatDate } from '@/lib/utils'
```

## Error Handling
- Always implement proper error boundaries
- Use try-catch blocks for async operations
- Provide meaningful error messages to users
- Log errors appropriately for debugging
- Create fallback UI states for error conditions

## Performance Guidelines
- Use React.memo for expensive components
- Implement proper loading states
- Optimize re-renders with useMemo and useCallback
- Use lazy loading for route-based code splitting
- Implement proper data fetching patterns

## Build & Quality Commands
```bash
npm run dev        # Development server
npm run build      # Production build
npm run typecheck  # TypeScript checking
npm run lint       # ESLint checking
npm run test       # Run tests
```

## Common Anti-Patterns to Avoid
- Using `any` type in TypeScript
- Directly importing mockData in components (use service layer)
- Not following the centralized data flow pattern (mockData → service → hook → component)
- Directly mutating state
- Missing dependency arrays in useEffect
- Inline styles instead of Tailwind classes
- Not handling loading and error states
- Missing proper TypeScript interfaces
- Inconsistent component organization
- Not following established service/hook patterns
- Not mocking hooks properly in tests
- Creating separate components for create/edit when one can handle both
- Not implementing proper form validation and error handling
- Missing loading states during API operations
- Not refreshing data after successful mutations

## Project-Specific Patterns

### Data Flow Architecture
```
mockData → API Service → Custom Hook → Component
```

### Service Layer Pattern
- All data access goes through services (clientApi, userApi, subscriptionApi, workflowApi)
- Services simulate API delays with `simulateApiDelay()`
- Services return standardized `ApiResponse<T>` or `PaginatedResponse<T>`
- Services handle filtering, pagination, and sorting
- Services provide CRUD operations (create, read, update, delete)
- Services handle data mutations and status updates

### Hook Pattern
- Custom hooks manage state and API integration
- Hooks provide loading, error, and data states
- Hooks offer methods for updating filters/search/pagination
- Multiple specialized hooks per service (e.g., useUsers, useUserStats, useSubscriptions, useWorkflows)
- Hooks handle refetching data after mutations
- Hooks provide proper TypeScript typing for all return values

### Component Integration
- Components use hooks, never call services directly
- Always handle loading and error states from hooks
- Use hook methods for user interactions (updateSearch, updateRole, etc.)
- Mock hooks in tests, not services

### Form Management Pattern
- Use controlled components with useState for form data
- Implement comprehensive client-side validation
- Handle form submission with proper error handling and loading states
- Use modal dialogs for create/edit operations (following UserManagement pattern)
- Provide success feedback and automatic form closure
- Scroll to error messages for better UX
- Support both create and edit modes in the same component
- Reset form data on close/cancel

## When Making Changes
1. Always check existing similar components first
2. Follow the established patterns and conventions
3. Ensure TypeScript strict compliance
4. Write appropriate tests
5. Run quality checks before finishing
6. Consider accessibility and user experience
7. Maintain consistency with the design system

Remember: This is a production-quality application. Code should be maintainable, well-tested, and follow enterprise development standards.